===============================
Upgrade Management Instructions
===============================
=============================================================================
=============================================================================
Features of this updated version:

Scalable, categorized structure – easy to add hundreds of commands/playbooks.

Dark theme.

Syntax highlighting for Bash and YAML using Prism.js.

Search/filter functionality works across all categories.

Expand/collapse works correctly, one item at a time.

Placeholder “Setups/Builds” section for future additions.

Now, when you want to add a new command or playbook, just:

Find the correct category or create a new one.

Add an object to items with name and syntax (or setup / info).

Save and reload — the UI automatically includes it.

This gives you a fully functional Ansible practice hub in a browser that can grow with your playbooks and commands.

##Template for Adding a New Command Category##

ansibleData.commands.push({
  category: "CATEGORY_NAME",  // e.g., "Monitoring", "Security", "Networking"
  items: [
    { name: "Command Name 1", syntax: "actual_command_here" },
    { name: "Command Name 2", syntax: "actual_command_here" },
    { name: "Command Name 3", syntax: "actual_command_here" }
  ]
});


Example:

ansibleData.commands.push({
  category: "Monitoring",
  items: [
    { name: "Check CPU Usage", syntax: "ansible all -m command -a 'top -b -n1 | head -5'" },
    { name: "Check Running Services", syntax: "ansible all -m service_facts" }
  ]
});

2️⃣ Template for Adding a New Playbook Category
ansibleData.playbooks.push({
  category: "CATEGORY_NAME", // e.g., "Web Servers", "Users", "Health"
  items: [
    {
      name: "Playbook Name 1",
      setup: `---\n- name: Description\n  hosts: all\n  become: yes\n  tasks:\n    - name: Task description\n      MODULE:\n        PARAMS`
    },
    {
      name: "Playbook Name 2",
      setup: `---\n- name: Description\n  hosts: all\n  tasks:\n    - name: Task description\n      MODULE:\n        PARAMS`
    }
  ]
});


Example:

ansibleData.playbooks.push({
  category: "Security",
  items: [
    {
      name: "Disable Root SSH Login",
      setup: `---\n- name: Secure SSH\n  hosts: all\n  become: yes\n  tasks:\n    - name: Disable root login\n      lineinfile:\n        path: /etc/ssh/sshd_config\n        regexp: '^PermitRootLogin'\n        line: 'PermitRootLogin no'\n      notify: Restart sshd\n\n  handlers:\n    - name: Restart sshd\n      service:\n        name: sshd\n        state: restarted`
    }
  ]
});

3️⃣ Template for Adding a New Setup/Build Category
ansibleData.setups.push({
  category: "CATEGORY_NAME",  // e.g., "Builds", "Guides"
  items: [
    { name: "Setup Name", info: "Description or instructions for this setup" }
  ]
});


Example:

ansibleData.setups.push({
  category: "Guides",
  items: [
    { name: "Initial Server Setup", info: "Step-by-step instructions for setting up a new server with Ansible." }
  ]
});

✅ How to Use

Copy the template for the type you want (command, playbook, or setup).

Replace CATEGORY_NAME, Command Name, Playbook Name, syntax, or setup with your actual content.

Paste it anywhere in your <script> block, after your original ansibleData declaration.

Reload the page — the new category and items automatically appear=================================================================================
=================================================================================



Commands

Structure: Keep them in the commands array in your JS. Each command object has:

{
  name: "Descriptive Name",   // what shows in the list
  syntax: "full command here" // what shows in the expanded <pre>
}


Tips:

Use short, descriptive names (e.g., “Check CPU Load”, “List Services”).

Keep the syntax exactly as you’d type it in the terminal.

You can group similar commands by prefixing names, e.g., “Disk: df -h”, “Disk: lsblk” to visually separate categories.

Example:

{ name: "Disk: Check Usage", syntax: "ansible all -m command -a 'df -h'" },
{ name: "Disk: List Devices", syntax: "ansible all -m command -a 'lsblk'" }

2️⃣ Playbooks

Structure: Keep them in the playbooks array. Each object has:

{
  name: "Descriptive Name",  // shown in the list
  setup: "YAML content as a string" // what shows in the expanded <pre>
}


Tips:

Use clear descriptive names like “Update Packages” or “User Management Example”.

Keep the YAML indentation correct — any misalignment will make it unreadable in the browser.

When adding multiple tasks, separate them logically with comments or blank lines for readability.

Example:

{
  name: "Install Web Server",
  setup: `---\n- name: Install Apache\n  hosts: all\n  become: yes\n  tasks:\n    - name: Install apache2\n      apt:\n        name: apache2\n        state: present\n      when: ansible_os_family == "Debian"`
}

3️⃣ Setups / Builds

Structure: Keep them simple for now:

{
  name: "Build Name",
  info: "Textual instructions or notes for this build."
}


Tips:

Use this for documentation, setup guides, or step-by-step instructions.

Later, you could even include links to scripts, playbooks, or external resources.

4️⃣ Adding New Items

Copy an existing object in the array (commands, playbooks, or setups).

Change name and syntax / setup / info.

Save the file, reload the browser — it automatically renders.

The search/filter will immediately pick up new items.

5️⃣ Optional Best Practices

Consistency: Keep naming consistent across commands/playbooks (e.g., verbs first: “Check CPU”, “Install Nginx”).

Comments: In YAML playbooks, add brief comments to explain tasks.

Categorization: For larger lists, consider adding a category field and later extend the UI to filter by category.

Testing: Test your commands/playbooks separately in a terminal before adding them to the web UI to avoid syntax errors.

If you follow this structure, your boilerplate becomes a scalable, beginner-friendly Ansible reference hub — you can just keep dropping in commands and playbooks as you create or learn them.
